import logging
import random
import time
from datetime import datetime, timedelta
import json
import os

from instagrapi import Client
from instagrapi.exceptions import LoginRequired, ClientError

from config import ACCOUNTS_DIR
from database.models import InstagramAccount, TaskStatus
from database.db_manager import get_session, get_instagram_account

logger = logging.getLogger(__name__)

class AccountWarmer:
    def __init__(self, account_id=None, client=None):
        self.account_id = account_id
        self.client = client
        self.account = None

        if account_id and not client:
            self.account = get_instagram_account(account_id)
            if not self.account:
                logger.error(f"–ê–∫–∫–∞—É–Ω—Ç —Å ID {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                raise ValueError(f"–ê–∫–∫–∞—É–Ω—Ç —Å ID {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

            self.client = self._get_client()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞
        self.min_likes = 3  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –∑–∞ —Å–µ—Å—Å–∏—é
        self.max_likes = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –∑–∞ —Å–µ—Å—Å–∏—é
        self.min_feed_scroll = 10  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Ä—É—Ç–æ–∫ –ª–µ–Ω—Ç—ã
        self.max_feed_scroll = 30  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Ä—É—Ç–æ–∫ –ª–µ–Ω—Ç—ã
        self.min_reels_watch = 5  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ä–∏–ª—Å
        self.max_reels_watch = 15  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ä–∏–ª—Å
        self.like_probability = 0.3  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ª–∞–π–∫–∞ (30%)
        self.comment_probability = 0.05  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (5%)
        self.follow_probability = 0.02  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ (2%)

        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        self.comments = [
            "üëç", "üî•", "Nice!", "Cool!", "Amazing!", "Great content!",
            "Love it!", "Awesome!", "Wow!", "Fantastic!", "Beautiful!",
            "Impressive!", "Brilliant!", "Superb!", "Excellent!"
        ]

        # –•–µ—à—Ç–µ–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.hashtags = [
            "photography", "nature", "travel", "food", "fitness",
            "fashion", "art", "beauty", "music", "style", "design"
        ]

        # –ñ—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.activity_log = {
            "session_start": datetime.now().isoformat(),
            "likes": 0,
            "comments": 0,
            "follows": 0,
            "feed_scrolls": 0,
            "reels_watched": 0,
            "hashtags_explored": 0,
            "errors": []
        }

    def _get_client(self):
        #–ü–æ–ª—É—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç Instagram –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        client = Client()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Å—Å–∏–∏
        session_file = os.path.join(ACCOUNTS_DIR, str(self.account_id), 'session.json')
        if os.path.exists(session_file):
            try:
                client.load_settings(session_file)
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {self.account.username}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ö–æ–¥
        try:
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±—Ä–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä amount
            client.get_timeline_feed()
        except (LoginRequired, ClientError) as e:
            logger.info(f"–¢—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {self.account.username}: {e}")
            try:
                client.login(self.account.username, self.account.password)
                logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç {self.account.username}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
                os.makedirs(os.path.join(ACCOUNTS_DIR, str(self.account_id)), exist_ok=True)
                client.dump_settings(session_file)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–∫–∫–∞—É–Ω—Ç {self.account.username}: {e}")
                raise

        return client

    def _random_delay(self, min_seconds=1, max_seconds=5):
        #–°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        delay = random.uniform(min_seconds, max_seconds)
        time.sleep(delay)
        return delay

    def _save_activity_log(self):
        #–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∂—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.activity_log["session_end"] = datetime.now().isoformat()

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        log_dir = os.path.join(ACCOUNTS_DIR, str(self.account_id), 'warming_logs')
        os.makedirs(log_dir, exist_ok=True)

        # –ò–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
        log_file = os.path.join(log_dir, f"warming_log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –≤ —Ñ–∞–π–ª
        with open(log_file, 'w', encoding='utf-8') as f:
            json.dump(self.activity_log, f, ensure_ascii=False, indent=4)

        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –∂—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {self.account.username}")

    def browse_feed(self):
        #–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–µ–Ω—Ç—ã —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –ª–∞–π–∫–∞–º–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–µ–Ω—Ç—ã –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {self.account.username}")

        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Ä—É—Ç–æ–∫ –ª–µ–Ω—Ç—ã
            scroll_count = random.randint(self.min_feed_scroll, self.max_feed_scroll)

            # –ü–æ–ª—É—á–∞–µ–º –ª–µ–Ω—Ç—É (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±—Ä–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä amount)
            feed_items = self.client.get_timeline_feed()
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            feed_items = feed_items[:scroll_count] if len(feed_items) > scroll_count else feed_items

            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(feed_items)} –ø–æ—Å—Ç–æ–≤ –∏–∑ –ª–µ–Ω—Ç—ã")
            self.activity_log["feed_scrolls"] = len(feed_items)

            # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –ø–æ—Å—Ç—ã
            for item in feed_items:
                # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º
                self._random_delay(2, 8)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ—Å—Ç–∞ –º–µ–¥–∏–∞
                if not hasattr(item, 'media_id'):
                    continue

                media_id = item.id

                # –° –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é —Å—Ç–∞–≤–∏–º –ª–∞–π–∫
                if random.random() < self.like_probability:
                    try:
                        self.client.media_like(media_id)
                        logger.info(f"–ü–æ—Å—Ç–∞–≤–ª–µ–Ω –ª–∞–π–∫ –Ω–∞ –ø–æ—Å—Ç {media_id}")
                        self.activity_log["likes"] += 1
                        self._random_delay(1, 3)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫: {e}")
                        self.activity_log["errors"].append(f"Like error: {str(e)}")

                # –° –º–µ–Ω—å—à–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                if random.random() < self.comment_probability:
                    try:
                        comment_text = random.choice(self.comments)
                        self.client.media_comment(media_id, comment_text)
                        logger.info(f"–û—Å—Ç–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ –ø–æ—Å—Ç {media_id}: {comment_text}")
                        self.activity_log["comments"] += 1
                        self._random_delay(3, 7)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {e}")
                        self.activity_log["errors"].append(f"Comment error: {str(e)}")

                # –° –æ—á–µ–Ω—å –º–∞–ª–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if random.random() < self.follow_probability:
                    try:
                        user_id = item.user.pk
                        self.client.user_follow(user_id)
                        logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {item.user.username}")
                        self.activity_log["follows"] += 1
                        self._random_delay(4, 10)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è: {e}")
                        self.activity_log["errors"].append(f"Follow error: {str(e)}")

            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ª–µ–Ω—Ç—ã: {e}")
            self.activity_log["errors"].append(f"Feed browsing error: {str(e)}")
            return False

    def watch_reels(self):
        #–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∏–ª—Å —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –ª–∞–π–∫–∞–º–∏
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∏–ª—Å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {self.account.username}")

        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∏–ª—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            reels_count = random.randint(self.min_reels_watch, self.max_reels_watch)

            # –ü–æ–ª—É—á–∞–µ–º —Ä–∏–ª—Å
            reels = self.client.reels_feed(amount=reels_count)

            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(reels)} —Ä–∏–ª—Å")
            self.activity_log["reels_watched"] = len(reels)

            # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Ä–∏–ª—Å
            for reel in reels:
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∏–ª—Å (–∑–∞–¥–µ—Ä–∂–∫–∞ 5-15 —Å–µ–∫—É–Ω–¥)
                watch_time = self._random_delay(5, 15)

                # –° –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é —Å—Ç–∞–≤–∏–º –ª–∞–π–∫
                if random.random() < self.like_probability:
                    try:
                        self.client.media_like(reel.id)
                        logger.info(f"–ü–æ—Å—Ç–∞–≤–ª–µ–Ω –ª–∞–π–∫ –Ω–∞ —Ä–∏–ª—Å {reel.id}")
                        self.activity_log["likes"] += 1
                        self._random_delay(1, 3)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫ –Ω–∞ —Ä–∏–ª—Å: {e}")
                        self.activity_log["errors"].append(f"Reel like error: {str(e)}")

            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ä–∏–ª—Å: {e}")
            self.activity_log["errors"].append(f"Reels watching error: {str(e)}")
            return False

    def explore_hashtags(self):
        #–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–æ–≤ –ø–æ —Ö–µ—à—Ç–µ–≥–∞–º
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Ö–µ—à—Ç–µ–≥–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {self.account.username}")

        try:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ö–µ—à—Ç–µ–≥
            hashtag = random.choice(self.hashtags)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –ø–æ —Ö–µ—à—Ç–µ–≥—É
            medias = self.client.hashtag_medias_recent(hashtag, amount=10)

            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(medias)} –ø–æ—Å—Ç–æ–≤ –ø–æ —Ö–µ—à—Ç–µ–≥—É #{hashtag}")
            self.activity_log["hashtags_explored"] += 1

            # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –ø–æ—Å—Ç—ã
            for media in medias:
                # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º
                self._random_delay(2, 6)

                # –° –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é —Å—Ç–∞–≤–∏–º –ª–∞–π–∫
                if random.random() < self.like_probability:
                    try:
                        self.client.media_like(media.id)
                        logger.info(f"–ü–æ—Å—Ç–∞–≤–ª–µ–Ω –ª–∞–π–∫ –Ω–∞ –ø–æ—Å—Ç {media.id} –ø–æ —Ö–µ—à—Ç–µ–≥—É #{hashtag}")
                        self.activity_log["likes"] += 1
                        self._random_delay(1, 3)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫ –Ω–∞ –ø–æ—Å—Ç –ø–æ —Ö–µ—à—Ç–µ–≥—É: {e}")
                        self.activity_log["errors"].append(f"Hashtag like error: {str(e)}")

            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ö–µ—à—Ç–µ–≥–æ–≤: {e}")
            self.activity_log["errors"].append(f"Hashtag exploration error: {str(e)}")
            return False

    def stop_warming_by_task_id(self, task_id):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ–≤ –ø–æ ID –∑–∞–¥–∞—á–∏"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ –ë–î
            from database.db_manager import update_warming_task_status
            update_warming_task_status(task_id, 'stopped')
            logger.info(f"–ü—Ä–æ–≥—Ä–µ–≤ –ø–æ –∑–∞–¥–∞—á–µ ID {task_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ –∑–∞–¥–∞—á–µ ID {task_id}: {e}")
            return False

    def warm_account(self):
        #–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≥—Ä–µ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞ {self.account.username}")

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞
            actions = [
                (self.browse_feed, 0.7),  # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–µ–Ω—Ç—ã —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 70%
                (self.watch_reels, 0.5),  # –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∏–ª—Å —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 50%
                (self.explore_hashtags, 0.3)  # –ü—Ä–æ—Å–º–æ—Ç—Ä —Ö–µ—à—Ç–µ–≥–æ–≤ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 30%
            ]

            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è —Å —É—á–µ—Ç–æ–º –∏—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
            for action, probability in actions:
                if random.random() < probability:
                    action()
                    # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
                    self._random_delay(5, 15)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∂—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            self._save_activity_log()

            logger.info(f"–ü—Ä–æ–≥—Ä–µ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞ {self.account.username} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True, "–ü—Ä–æ–≥—Ä–µ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥—Ä–µ–≤–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {self.account.username}: {e}")
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥—Ä–µ–≤–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}"

    def start_warming(self, duration, frequency, intensity):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        logger.info(f"–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {self.account.username} –Ω–∞ {duration} –º–∏–Ω—É—Ç")

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≥—Ä–µ–≤–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
        if intensity == "low":
            self.min_likes = 1
            self.max_likes = 5
            self.min_feed_scroll = 5
            self.max_feed_scroll = 15
            self.min_reels_watch = 2
            self.max_reels_watch = 8
        elif intensity == "high":
            self.min_likes = 5
            self.max_likes = 15
            self.min_feed_scroll = 15
            self.max_feed_scroll = 40
            self.min_reels_watch = 8
            self.max_reels_watch = 20

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ–≤
        success, message = self.warm_account()

        return success



def warm_account(account_id):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ ID"""
    try:
        warmer = AccountWarmer(account_id)
        success, message = warmer.warm_account()
        return success, message
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥—Ä–µ–≤–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")
        return False, str(e)