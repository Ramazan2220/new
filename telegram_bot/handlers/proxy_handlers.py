from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode, Update
from telegram.ext import ConversationHandler, CallbackContext, CallbackQueryHandler, CommandHandler, MessageHandler, Filters
from database.db_manager import add_proxy, get_proxies, update_proxy, delete_proxy, assign_proxy_to_account
from utils.proxy_manager import check_proxy, distribute_proxies, check_all_proxies
import re
import logging

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
PROXY_INPUT = 1

logger = logging.getLogger(__name__)

def proxy_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏"""
    keyboard = [
        [
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏", callback_data='add_proxy'),
            InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏", callback_data='list_proxies')
        ],
        [
            InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–∫—Å–∏", callback_data='check_proxies'),
            InlineKeyboardButton("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏", callback_data='distribute_proxies')
        ],
        [
            InlineKeyboardButton("üì§ –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏", callback_data='import_proxies'),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        update.message.reply_text(
            "üîÑ *–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        update.callback_query.edit_message_text(
            "üîÑ *–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )

    # –Ø–≤–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    return ConversationHandler.END

def start_add_proxy(update: Update, context: CallbackContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏"""
    query = update.callback_query
    query.answer()

    query.edit_message_text(
        "üìù *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`host:port:username:password`\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `154.13.71.245:6641:khbttott:sazhjvj8p21o`\n\n"
        "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–∫—Å–∏, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.",
        parse_mode=ParseMode.MARKDOWN
    )

    return PROXY_INPUT

def add_proxy_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–æ–∫—Å–∏"""
    text = update.message.text.strip()
    lines = text.split('\n')

    success_count = 0
    error_count = 0
    error_messages = []

    for line in lines:
        parts = line.strip().split(':')
        if len(parts) < 2 or len(parts) > 4:
            error_count += 1
            error_messages.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {line}")
            continue

        try:
            host = parts[0]
            port = int(parts[1])
            username = parts[2] if len(parts) > 2 else None
            password = parts[3] if len(parts) > 3 else None
            protocol = 'http'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            success, result = add_proxy(protocol, host, port, username, password)

            if success:
                success_count += 1
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–∫—Å–∏ {host}:{port}")
            else:
                error_count += 1
                error_messages.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {line}: {result}")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏: {result}")

        except Exception as e:
            error_count += 1
            error_messages.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {line}: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    response = f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–∫—Å–∏: {success_count}\n"
    if error_count > 0:
        response += f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n\n"
        if len(error_messages) > 5:
            response += "–ü–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫:\n"
            for i, msg in enumerate(error_messages[:5]):
                response += f"{i+1}. {msg}\n"
        else:
            response += "–û—à–∏–±–∫–∏:\n"
            for i, msg in enumerate(error_messages):
                response += f"{i+1}. {msg}\n"

    keyboard = [
        [InlineKeyboardButton("üîô –ö –º–µ–Ω—é –ø—Ä–æ–∫—Å–∏", callback_data='menu_proxy')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text(response, reply_markup=reply_markup)
    return ConversationHandler.END

def list_proxies_handler(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏"""
    query = update.callback_query
    query.answer()

    proxies = get_proxies()

    if not proxies:
        keyboard = [
            [InlineKeyboardButton("üîô –ö –º–µ–Ω—é –ø—Ä–æ–∫—Å–∏", callback_data='menu_proxy')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        query.edit_message_text(
            "üìã *–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏*\n\n"
            "–ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        return ConversationHandler.END

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
    message = "üìã *–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏*\n\n"
    keyboard = []

    for proxy in proxies:
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if proxy.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        auth_info = " (—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π)" if proxy.username else ""

        message += f"*ID {proxy.id}*: {proxy.host}:{proxy.port} - {proxy.protocol.upper()}{auth_info} - {status}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–∫—Å–∏
        keyboard.append([
            InlineKeyboardButton(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å #{proxy.id}", callback_data=f'check_proxy_{proxy.id}'),
            InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å #{proxy.id}", callback_data=f'delete_proxy_{proxy.id}')
        ])

    keyboard.append([InlineKeyboardButton("üîô –ö –º–µ–Ω—é –ø—Ä–æ–∫—Å–∏", callback_data='menu_proxy')])
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    query.edit_message_text(
        message,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

    return ConversationHandler.END

def check_proxy_handler(update: Update, context: CallbackContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏"""
    query = update.callback_query
    query.answer()

    proxy_id = int(query.data.split('_')[-1])

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    proxy = next((p for p in get_proxies() if p.id == proxy_id), None)

    if not proxy:
        query.edit_message_text(
            "‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."
        )
        return ConversationHandler.END

    query.edit_message_text(
        f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ {proxy.host}:{proxy.port}... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –ø—Ä–æ–∫—Å–∏
    proxy_url = f"{proxy.protocol}://"
    if proxy.username and proxy.password:
        proxy_url += f"{proxy.username}:{proxy.password}@"
    proxy_url += f"{proxy.host}:{proxy.port}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏
    _, is_working, error = check_proxy(proxy.id, proxy_url)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_proxy(proxy_id, is_active=is_working)

    keyboard = [
        [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –ø—Ä–æ–∫—Å–∏", callback_data='list_proxies')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if is_working:
        query.edit_message_text(
            f"‚úÖ –ü—Ä–æ–∫—Å–∏ {proxy.host}:{proxy.port} —Ä–∞–±–æ—Ç–∞–µ—Ç!",
            reply_markup=reply_markup
        )
    else:
        query.edit_message_text(
            f"‚ùå –ü—Ä–æ–∫—Å–∏ {proxy.host}:{proxy.port} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n–û—à–∏–±–∫–∞: {error}",
            reply_markup=reply_markup
        )

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.clear()
    return ConversationHandler.END

def delete_proxy_handler(update: Update, context: CallbackContext):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–∫—Å–∏"""
    query = update.callback_query
    query.answer()

    proxy_id = int(query.data.split('_')[-1])

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    proxy = next((p for p in get_proxies() if p.id == proxy_id), None)

    if not proxy:
        query.edit_message_text(
            "‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."
        )
        return ConversationHandler.END

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f'confirm_delete_proxy_{proxy_id}'),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='list_proxies')
        ],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    query.edit_message_text(
        f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏ {proxy.host}:{proxy.port}?",
        reply_markup=reply_markup
    )

    return ConversationHandler.END

def confirm_delete_proxy_handler(update: Update, context: CallbackContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏"""
    query = update.callback_query
    query.answer()

    proxy_id = int(query.data.split('_')[-1])

    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    success, result = delete_proxy(proxy_id)

    keyboard = [
        [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –ø—Ä–æ–∫—Å–∏", callback_data='list_proxies')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if success:
        query.edit_message_text(
            f"‚úÖ –ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
            reply_markup=reply_markup
        )
    else:
        query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏: {result}",
            reply_markup=reply_markup
        )

    return ConversationHandler.END

def check_all_proxies_handler(update: Update, context: CallbackContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –ø—Ä–æ–∫—Å–∏"""
    query = update.callback_query
    query.answer()

    query.edit_message_text(
        "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø—Ä–æ–∫—Å–∏
    results = check_all_proxies()

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total = len(results)
    working = sum(1 for result in results.values() if result['working'])

    keyboard = [
        [InlineKeyboardButton("üîô –ö –º–µ–Ω—é –ø—Ä–æ–∫—Å–∏", callback_data='menu_proxy')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    query.edit_message_text(
        f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–í—Å–µ–≥–æ –ø—Ä–æ–∫—Å–∏: {total}\n"
        f"–†–∞–±–æ—Ç–∞—é—â–∏—Ö: {working}\n"
        f"–ù–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö: {total - working}",
        reply_markup=reply_markup
    )

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.clear()
    return ConversationHandler.END

def distribute_proxies_handler(update: Update, context: CallbackContext):
    """–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ–∫—Å–∏ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"""
    query = update.callback_query
    query.answer()

    query.edit_message_text(
        "üîÑ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
    )

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–∫—Å–∏
    success, result = distribute_proxies()

    keyboard = [
        [InlineKeyboardButton("üîô –ö –º–µ–Ω—é –ø—Ä–æ–∫—Å–∏", callback_data='menu_proxy')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if success:
        query.edit_message_text(
            f"‚úÖ –ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã!\n\n{result}",
            reply_markup=reply_markup
        )
    else:
        query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏: {result}",
            reply_markup=reply_markup
        )

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.clear()
    return ConversationHandler.END

def import_proxies_handler(update: Update, context: CallbackContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    query = update.callback_query
    query.answer()

    keyboard = [
        [InlineKeyboardButton("üîô –ö –º–µ–Ω—é –ø—Ä–æ–∫—Å–∏", callback_data='menu_proxy')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    query.edit_message_text(
        "üì§ *–ò–º–ø–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`host:port:username:password`\n\n"
        "–ö–∞–∂–¥—ã–π –ø—Ä–æ–∫—Å–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ.",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    context.user_data['waiting_for_proxy_file'] = True

    return ConversationHandler.END

def process_proxy_file(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª —Å –ø—Ä–æ–∫—Å–∏"""
    if not context.user_data.get('waiting_for_proxy_file', False):
        return

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    context.user_data['waiting_for_proxy_file'] = False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª
    if not update.message.document:
        update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª."
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Ç–µ–∫—Å—Ç–æ–≤—ã–π
    file = update.message.document
    if not file.mime_type.startswith('text/'):
        update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª."
        )
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file_id = file.file_id
    new_file = context.bot.get_file(file_id)
    file_content = new_file.download_as_bytearray().decode('utf-8')

    # –ü–∞—Ä—Å–∏–º –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞
    lines = file_content.strip().split('\n')
    success_count = 0
    error_count = 0
    error_messages = []

    for line in lines:
        line = line.strip()
        if not line:
            continue

        parts = line.split(':')
        if len(parts) < 2 or len(parts) > 4:
            error_count += 1
            error_messages.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {line}")
            continue

        try:
            host = parts[0]
            port = int(parts[1])
            username = parts[2] if len(parts) > 2 else None
            password = parts[3] if len(parts) > 3 else None
            protocol = 'http'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            success, result = add_proxy(protocol, host, port, username, password)

            if success:
                success_count += 1
            else:
                error_count += 1
                error_messages.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {line}: {result}")
        except Exception as e:
            error_count += 1
            error_messages.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {line} - {str(e)}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    message = f"üì§ *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–æ–∫—Å–∏*\n\n"
    message += f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(lines)}\n"
    message += f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {success_count}\n"
    message += f"–û—à–∏–±–æ–∫: {error_count}\n\n"

    if error_messages:
        message += "*–û—à–∏–±–∫–∏:*\n"
        for i, error in enumerate(error_messages[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
            message += f"{i+1}. {error}\n"

        if len(error_messages) > 10:
            message += f"... –∏ –µ—â–µ {len(error_messages) - 10} –æ—à–∏–±–æ–∫."

    keyboard = [
        [InlineKeyboardButton("üîô –ö –º–µ–Ω—é –ø—Ä–æ–∫—Å–∏", callback_data='menu_proxy')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text(
        message,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()

def back_to_main_handler(update: Update, context: CallbackContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    query.answer()

    # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    from telegram_bot.keyboards import get_main_menu_keyboard
    query.edit_message_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard()
    )

    return ConversationHandler.END

def get_proxy_handlers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏"""
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏
    add_proxy_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_add_proxy, pattern='^add_proxy$')],
        states={
            PROXY_INPUT: [MessageHandler(Filters.text & ~Filters.command, add_proxy_handler)]
        },
        fallbacks=[CommandHandler('cancel', lambda u, c: ConversationHandler.END)]
    )

    return [
        CommandHandler("proxy", proxy_menu),
        CallbackQueryHandler(proxy_menu, pattern='^menu_proxy$'),
        add_proxy_conv_handler,
        CallbackQueryHandler(list_proxies_handler, pattern='^list_proxies$'),
        CallbackQueryHandler(check_proxy_handler, pattern='^check_proxy_\d+$'),
        CallbackQueryHandler(delete_proxy_handler, pattern='^delete_proxy_\d+$'),
        CallbackQueryHandler(confirm_delete_proxy_handler, pattern='^confirm_delete_proxy_\d+$'),
        CallbackQueryHandler(check_all_proxies_handler, pattern='^check_proxies$'),
        CallbackQueryHandler(distribute_proxies_handler, pattern='^distribute_proxies$'),
        CallbackQueryHandler(import_proxies_handler, pattern='^import_proxies$'),
        CallbackQueryHandler(back_to_main_handler, pattern='^back_to_main$'),
        MessageHandler(Filters.document, process_proxy_file)
    ]