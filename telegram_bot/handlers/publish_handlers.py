import os
import tempfile
import json
import logging
import threading
from datetime import datetime

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from telegram.ext import ConversationHandler

from database.db_manager import get_instagram_account, get_instagram_accounts, create_publish_task
from instagram_api.publisher import publish_video
from database.models import TaskType, TaskStatus
from instagram.reels_manager import publish_reels_in_parallel
from utils.task_queue import add_task_to_queue, get_task_status

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
CHOOSE_ACCOUNT, ENTER_CAPTION, CONFIRM_PUBLISH, CHOOSE_SCHEDULE, CHOOSE_HIDE_FROM_FEED = range(10, 15)

def is_admin(user_id):
    from telegram_bot.bot import is_admin
    return is_admin(user_id)

def publish_now_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    user_id = update.effective_user.id

    if not is_admin(user_id):
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    accounts = get_instagram_accounts()

    if not accounts:
        keyboard = [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data='add_account')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Instagram. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç.",
            reply_markup=reply_markup
        )
        return ConversationHandler.END

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
    keyboard = []
    for account in accounts:
        if account.is_active:
            keyboard.append([InlineKeyboardButton(f"üë§ {account.username}", callback_data=f"publish_account_{account.id}")])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã"
    keyboard.append([InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data='publish_all_accounts')])
    keyboard.append([InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='cancel_publish')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        query = update.callback_query
        query.answer()
        query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
            reply_markup=reply_markup
        )
    else:
        update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
            reply_markup=reply_markup
        )

    return CHOOSE_ACCOUNT

def choose_account_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    query.answer()

    # –ü–æ–ª—É—á–∞–µ–º ID –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ callback_data
    account_id = int(query.data.split('_')[-1])
    context.user_data['publish_account_id'] = account_id

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    if 'selected_accounts' not in context.user_data:
        context.user_data['selected_accounts'] = []
    context.user_data['selected_accounts'].append(account_id)

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
    account = get_instagram_account(account_id)
    context.user_data['publish_account_username'] = account.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª
    if 'publish_media_path' in context.user_data:
        # –ï—Å–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–æ–¥–ø–∏—Å–∏
        query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: *{account.username}*\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏):",
            parse_mode=ParseMode.MARKDOWN
        )
        return ENTER_CAPTION
    else:
        # –ï—Å–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –Ω–µ—Ç, –ø—Ä–æ—Å–∏–º –∑–∞–≥—Ä—É–∑–∏—Ç—å
        query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: *{account.username}*\n\n"
            f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
            parse_mode=ParseMode.MARKDOWN
        )
        return ConversationHandler.END

def choose_all_accounts_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    accounts = get_instagram_accounts()
    active_accounts = [account for account in accounts if account.is_active]

    if not active_accounts:
        query.edit_message_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ ID –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    account_ids = [account.id for account in active_accounts]
    context.user_data['publish_account_ids'] = account_ids
    context.user_data['publish_to_all_accounts'] = True

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    account_usernames = [account.username for account in active_accounts]
    context.user_data['publish_account_usernames'] = account_usernames

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    account_names = [account.username for account in active_accounts]
    accounts_str = ", ".join(account_names)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª
    if 'publish_media_path' in context.user_data:
        # –ï—Å–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–æ–¥–ø–∏—Å–∏
        query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã ({len(active_accounts)}):\n{accounts_str}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏):"
        )
        return ENTER_CAPTION
    else:
        # –ï—Å–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –Ω–µ—Ç, –ø—Ä–æ—Å–∏–º –∑–∞–≥—Ä—É–∑–∏—Ç—å
        query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã ({len(active_accounts)}):\n{accounts_str}\n\n"
            f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:"
        )
        return ConversationHandler.END  # –ó–¥–µ—Å—å –º—ã –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ

def choose_category_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)"""
    query = update.callback_query
    query.answer()

    query.edit_message_text(
        "üöß –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã."
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∞–∫–∫–∞—É–Ω—Ç–∞
    return publish_now_handler(update, context)

def video_upload_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ"""
    user_id = update.effective_user.id

    if not is_admin(user_id):
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç—ã
    if 'publish_account_id' not in context.user_data and 'publish_account_ids' not in context.user_data:
        # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
        # Store the video file information for later use
        context.user_data['pending_video'] = update.message.video or update.message.document
        return publish_now_handler(update, context)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
    video_file = update.message.video or update.message.document
    file_id = video_file.file_id

    # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
    video = context.bot.get_file(file_id)

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
    with tempfile.NamedTemporaryFile(delete=False, suffix='.mp4') as temp_file:
        video_path = temp_file.name

    # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    video.download(video_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ –∏ —Ç–∏–ø –º–µ–¥–∏–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ)
    context.user_data['publish_media_path'] = video_path
    context.user_data['publish_media_type'] = TaskType.VIDEO.name  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—å
    update.message.reply_text(
        "–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏):"
    )

    return ENTER_CAPTION

def enter_caption(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∏ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    if update.message.text == '/skip':
        context.user_data['publish_caption'] = ""
    else:
        context.user_data['publish_caption'] = update.message.text

    # –ï—Å–ª–∏ —ç—Ç–æ —Ä–∏–ª—Å (–≤–∏–¥–µ–æ), —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–µ
    if context.user_data.get('publish_media_type') == TaskType.VIDEO.name:
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–µ", callback_data='keep_in_feed'),
                InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–∏", callback_data='hide_from_feed')
            ],
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='cancel_publish')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        update.message.reply_text(
            "–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã —É–¥–∞–ª–∏—Ç—å —Ä–∏–ª—Å –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è?\n"
            "(–†–∏–ª—Å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ Reels, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π)",
            reply_markup=reply_markup
        )
        return CHOOSE_HIDE_FROM_FEED
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        return show_publish_confirmation(update, context)

def choose_hide_from_feed(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ä–∏–ª—Å–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–µ"""
    query = update.callback_query
    query.answer()

    if query.data == 'hide_from_feed':
        context.user_data['hide_from_feed'] = True
        query.edit_message_text("–†–∏–ª—Å –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
    else:  # keep_in_feed
        context.user_data['hide_from_feed'] = False
        query.edit_message_text("–†–∏–ª—Å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    return show_publish_confirmation(update, context, is_callback=True)

def show_publish_confirmation(update, context, is_callback=False):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    media_type = context.user_data.get('publish_media_type')
    caption = context.user_data.get('publish_caption')
    hide_from_feed = context.user_data.get('hide_from_feed', False)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É–±–ª–∏–∫—É–µ–º –Ω–∞ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ
    if context.user_data.get('publish_to_all_accounts'):
        account_ids = context.user_data.get('publish_account_ids', [])
        accounts = [get_instagram_account(account_id) for account_id in account_ids]
        account_usernames = [account.username for account in accounts]
        account_info = f"üë• *–ê–∫–∫–∞—É–Ω—Ç—ã:* {len(account_usernames)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
    else:
        account_id = context.user_data.get('publish_account_id')
        account_username = context.user_data.get('publish_account_username')
        account_info = f"üë§ *–ê–∫–∫–∞—É–Ω—Ç:* {account_username}"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data='confirm_publish_now'),
            InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data='schedule_publish')
        ],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel_publish')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message_text = (
        f"*–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:*\n\n"
        f"{account_info}\n"
        f"üìù *–¢–∏–ø:* {media_type}\n"
        f"‚úèÔ∏è *–ü–æ–¥–ø–∏—Å—å:* {caption or '(–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏)'}\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–µ –¥–ª—è —Ä–∏–ª—Å–æ–≤
    if media_type == TaskType.VIDEO.name:
        message_text += f"üîç *–í–∏–¥–∏–º–æ—Å—Ç—å:* {'–°–∫—Ä—ã—Ç –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–∏' if hide_from_feed else '–í –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–µ'}\n"

    message_text += "\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"

    if is_callback:
        query = update.callback_query
        query.edit_message_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )

    return CONFIRM_PUBLISH

def confirm_publish_now(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    media_path = context.user_data.get('publish_media_path')
    media_type = context.user_data.get('publish_media_type')
    caption = context.user_data.get('publish_caption', '')
    hide_from_feed = context.user_data.get('hide_from_feed', False)
    user_id = query.from_user.id

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ç–∏–ø –≤ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ TaskType
    try:
        task_type = TaskType[media_type]
    except (KeyError, TypeError):
        query.edit_message_text(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞: {media_type}")
        return ConversationHandler.END

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    status_message = query.edit_message_text(
        f"‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É–±–ª–∏–∫—É–µ–º –Ω–∞ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ
    if 'publish_account_ids' in context.user_data:
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        account_ids = context.user_data.get('publish_account_ids')

        # –ü—É–±–ª–∏–∫—É–µ–º –≤–∏–¥–µ–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –Ω–∞ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        if task_type == TaskType.VIDEO:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            context.bot.edit_message_text(
                f"‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –Ω–∞ {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–∞—Ö...",
                chat_id=status_message.chat_id,
                message_id=status_message.message_id
            )

            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –æ—á–µ—Ä–µ–¥—å
            task_ids = []
            for account_id in account_ids:
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                additional_data = {
                    'hide_from_feed': hide_from_feed
                }

                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
                success, task_id = create_publish_task(
                    account_id=account_id,
                    task_type=task_type,
                    media_path=media_path,
                    caption=caption,
                    additional_data=json.dumps(additional_data)
                )

                if success:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
                    from utils.task_queue import add_task_to_queue
                    if add_task_to_queue(task_id, user_id, context.bot):
                        account = get_instagram_account(account_id)
                        task_ids.append((task_id, account.username))

            if task_ids:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
                message = "‚úÖ –°–æ–∑–¥–∞–Ω—ã –∑–∞–¥–∞—á–∏ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é:\n\n"
                for task_id, username in task_ids:
                    message += f"‚Ä¢ –ó–∞–¥–∞—á–∞ #{task_id} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {username}\n"

                message += "\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                context.bot.send_message(
                    chat_id=status_message.chat_id,
                    text=message
                )
            else:
                context.bot.edit_message_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é.",
                    chat_id=status_message.chat_id,
                    message_id=status_message.message_id
                )
        else:
            context.bot.edit_message_text(
                "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
                chat_id=status_message.chat_id,
                message_id=status_message.message_id
            )
    else:
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç
        account_id = context.user_data.get('publish_account_id')

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        context.bot.edit_message_text(
            "‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...",
            chat_id=status_message.chat_id,
            message_id=status_message.message_id
        )

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        additional_data = {
            'hide_from_feed': hide_from_feed
        }

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        success, task_id = create_publish_task(
            account_id=account_id,
            task_type=task_type,
            media_path=media_path,
            caption=caption,
            additional_data=json.dumps(additional_data)
        )

        if not success:
            context.bot.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {task_id}",
                chat_id=status_message.chat_id,
                message_id=status_message.message_id
            )
            return ConversationHandler.END

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
        from utils.task_queue import add_task_to_queue
        if add_task_to_queue(task_id, user_id, context.bot):
            account = get_instagram_account(account_id)
            context.bot.edit_message_text(
                f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –∞–∫–∫–∞—É–Ω—Ç {account.username} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å.\n"
                f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.",
                chat_id=status_message.chat_id,
                message_id=status_message.message_id
            )
        else:
            context.bot.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å.",
                chat_id=status_message.chat_id,
                message_id=status_message.message_id
            )

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if 'publish_account_id' in context.user_data:
        del context.user_data['publish_account_id']
    if 'publish_account_username' in context.user_data:
        del context.user_data['publish_account_username']
    if 'publish_account_ids' in context.user_data:
        del context.user_data['publish_account_ids']
    if 'publish_to_all_accounts' in context.user_data:
        del context.user_data['publish_to_all_accounts']
    if 'publish_media_path' in context.user_data:
        # –ù–µ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        del context.user_data['publish_media_path']
    if 'publish_media_type' in context.user_data:
        del context.user_data['publish_media_type']
    if 'publish_caption' in context.user_data:
        del context.user_data['publish_caption']
    if 'hide_from_feed' in context.user_data:
        del context.user_data['hide_from_feed']

    return ConversationHandler.END

def schedule_publish_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    query.answer()

    query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2023 15:30"
    )

    return CHOOSE_SCHEDULE

def choose_schedule(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        scheduled_time = datetime.strptime(update.message.text, "%d.%m.%Y %H:%M")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        account_id = context.user_data.get('publish_account_id')
        media_path = context.user_data.get('publish_media_path')
        media_type = context.user_data.get('publish_media_type')
        caption = context.user_data.get('publish_caption', '')
        hide_from_feed = context.user_data.get('hide_from_feed', False)
        user_id = update.effective_user.id

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ç–∏–ø –≤ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ TaskType
        try:
            # –ï—Å–ª–∏ media_type - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –∏–º–µ–Ω–µ–º –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'VIDEO')
            task_type = TaskType[media_type]
        except (KeyError, TypeError):
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å, –≤—ã–¥–∞–µ–º –æ—à–∏–±–∫—É
            update.message.reply_text(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞: {media_type}")
            return ConversationHandler.END

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        additional_data = {
            'hide_from_feed': hide_from_feed
        }

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        success, task_id = create_publish_task(
            account_id=account_id,
            task_type=task_type,  # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è
            media_path=media_path,
            caption=caption,
            scheduled_time=scheduled_time,
            additional_data=json.dumps(additional_data)
        )

        if not success:
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {task_id}")
            return ConversationHandler.END

        keyboard = [[InlineKeyboardButton("üîô –ö –º–µ–Ω—é –∑–∞–¥–∞—á", callback_data='menu_tasks')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        update.message.reply_text(
            f"‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {scheduled_time.strftime('%d.%m.%Y %H:%M')}",
            reply_markup=reply_markup
        )

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if 'publish_account_id' in context.user_data:
            del context.user_data['publish_account_id']
        if 'publish_account_username' in context.user_data:
            del context.user_data['publish_account_username']
        if 'publish_media_path' in context.user_data:
            del context.user_data['publish_media_path']
        if 'publish_media_type' in context.user_data:
            del context.user_data['publish_media_type']
        if 'publish_caption' in context.user_data:
            del context.user_data['publish_caption']
        if 'hide_from_feed' in context.user_data:
            del context.user_data['hide_from_feed']
        if 'selected_accounts' in context.user_data:
            del context.user_data['selected_accounts']

    except ValueError:
        update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2023 15:30"
        )
        return CHOOSE_SCHEDULE

    return ConversationHandler.END

def cancel_publish(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    query.answer()

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if 'publish_account_id' in context.user_data:
        del context.user_data['publish_account_id']
    if 'publish_account_username' in context.user_data:
        del context.user_data['publish_account_username']
    if 'publish_account_ids' in context.user_data:
        del context.user_data['publish_account_ids']
    if 'publish_to_all_accounts' in context.user_data:
        del context.user_data['publish_to_all_accounts']
    if 'selected_accounts' in context.user_data:
        del context.user_data['selected_accounts']
    if 'publish_media_path' in context.user_data:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.remove(context.user_data['publish_media_path'])
        except:
            pass
        del context.user_data['publish_media_path']
    if 'publish_media_type' in context.user_data:
        del context.user_data['publish_media_type']
    if 'publish_caption' in context.user_data:
        del context.user_data['publish_caption']
    if 'hide_from_feed' in context.user_data:
        del context.user_data['hide_from_feed']

    keyboard = [[InlineKeyboardButton("üîô –ö –º–µ–Ω—é –∑–∞–¥–∞—á", callback_data='menu_tasks')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    query.edit_message_text(
        "‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=reply_markup
    )

    return ConversationHandler.END

def check_task_status_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
    user_id = update.effective_user.id

    if not is_admin(user_id):
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ ID –∑–∞–¥–∞—á–∏
    if not context.args or not context.args[0].isdigit():
        update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: /task_status 123"
        )
        return

    task_id = int(context.args[0])

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    status = get_task_status(task_id)

    if not status:
        update.message.reply_text(
            f"‚ùå –ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
    if status['success']:
        message = f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n"
        if 'result' in status and status['result']:
            message += f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {status['result']}\n"
    else:
        message = f"‚ùå –ó–∞–¥–∞—á–∞ #{task_id} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π:\n{status['result']}\n"

    if 'completed_at' in status and status['completed_at']:
        message += f"–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {status['completed_at'].strftime('%d.%m.%Y %H:%M:%S')}"

    update.message.reply_text(message)

def get_publish_handlers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    from telegram.ext import CommandHandler, CallbackQueryHandler, MessageHandler, Filters

    publish_conversation = ConversationHandler(
        entry_points=[
            CommandHandler("publish_now", publish_now_handler),
            CallbackQueryHandler(publish_now_handler, pattern='^publish_now$')
        ],
        states={
            CHOOSE_ACCOUNT: [
                CallbackQueryHandler(choose_account_callback, pattern='^publish_account_\d+$'),
                CallbackQueryHandler(choose_all_accounts_callback, pattern='^publish_all_accounts$'),
                CallbackQueryHandler(cancel_publish, pattern='^cancel_publish$')
            ],
            ENTER_CAPTION: [
                MessageHandler(Filters.text & ~Filters.command, enter_caption),
                CommandHandler("skip", enter_caption)
            ],
            CHOOSE_HIDE_FROM_FEED: [
                CallbackQueryHandler(choose_hide_from_feed, pattern='^(hide_from_feed|keep_in_feed)$'),
                CallbackQueryHandler(cancel_publish, pattern='^cancel_publish$')
            ],
            CONFIRM_PUBLISH: [
                CallbackQueryHandler(confirm_publish_now, pattern='^confirm_publish_now$'),
                CallbackQueryHandler(schedule_publish_callback, pattern='^schedule_publish$'),
                CallbackQueryHandler(cancel_publish, pattern='^cancel_publish$')
            ],
            CHOOSE_SCHEDULE: [
                MessageHandler(Filters.text & ~Filters.command, choose_schedule)
            ]
        },
        fallbacks=[CommandHandler("cancel", lambda update, context: ConversationHandler.END)]
    )

    video_handler = MessageHandler(Filters.video | Filters.document.video, video_upload_handler)
    task_status_handler = CommandHandler("task_status", check_task_status_handler)

    return [publish_conversation, video_handler, task_status_handler]