# telegram_bot/bot.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

import logging
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler, ConversationHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from telegram_bot.handlers.warming_handlers import get_warming_handlers
from config import TELEGRAM_TOKEN, ADMIN_USER_IDS
from telegram_bot.handlers import get_all_handlers
from telegram_bot.handlers.account_handlers import (
    bulk_upload_accounts_file, list_accounts_handler, WAITING_ACCOUNTS_FILE,
    add_account, enter_username, enter_password, enter_email, enter_email_password,
    confirm_add_account, enter_verification_code, cancel_add_account, get_session_stats_handler,
    ENTER_USERNAME, ENTER_PASSWORD, ENTER_EMAIL, ENTER_EMAIL_PASSWORD, CONFIRM_ACCOUNT, ENTER_VERIFICATION_CODE,
    bulk_add_accounts_command, bulk_add_accounts_text
)
from telegram_bot.states import BULK_ADD_ACCOUNTS, WARMING_MENU, WARMING_ACCOUNT_SELECTION, WARMING_SETTINGS
from telegram_bot.handlers.task_handlers import retry_task_callback
from telegram_bot.handlers.profile_handlers import get_profile_handlers, profile_setup_menu
from telegram_bot.handlers.warming_handlers import (
    warming_menu,
    select_warming_account as select_account_for_warming,
    warming_default as start_account_warming,
    warming_status as show_warming_status,
    warming_settings as show_warming_settings
)

logger = logging.getLogger(__name__)

def is_admin(user_id):
    return user_id in ADMIN_USER_IDS

def start_handler(update, context):
    user = update.effective_user

    keyboard = [
        [InlineKeyboardButton("üë§ –ê–∫–∫–∞—É–Ω—Ç—ã", callback_data='menu_accounts')],
        [InlineKeyboardButton("üìù –ó–∞–¥–∞—á–∏", callback_data='menu_tasks')],
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–∫—Å–∏", callback_data='menu_proxy')],
        [InlineKeyboardButton("üî• –ü—Ä–æ–≥—Ä–µ–≤", callback_data='menu_warming')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='menu_help')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ Instagram.\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
        reply_markup=reply_markup
    )

def get_main_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üë§ –ê–∫–∫–∞—É–Ω—Ç—ã", callback_data='menu_accounts')],
        [InlineKeyboardButton("üìù –ó–∞–¥–∞—á–∏", callback_data='menu_tasks')],
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–∫—Å–∏", callback_data='menu_proxy')],
        [InlineKeyboardButton("üî• –ü—Ä–æ–≥—Ä–µ–≤", callback_data='menu_warming')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='menu_help')]
    ]
    return InlineKeyboardMarkup(keyboard)

def callback_handler(update, context):
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    query.answer()

    try:
        # –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
        if query.data == 'back_to_main' or query.data == 'main_menu':
            keyboard = [
                [InlineKeyboardButton("üë§ –ê–∫–∫–∞—É–Ω—Ç—ã", callback_data='menu_accounts')],
                [InlineKeyboardButton("üìù –ó–∞–¥–∞—á–∏", callback_data='menu_tasks')],
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–∫—Å–∏", callback_data='menu_proxy')],
                [InlineKeyboardButton("üî• –ü—Ä–æ–≥—Ä–µ–≤", callback_data='menu_warming')],
                [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='menu_help')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            query.edit_message_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
                reply_markup=reply_markup
            )

        # –ú–ï–ù–Æ –ê–ö–ö–ê–£–ù–¢–û–í
        elif query.data == 'menu_accounts' or query.data == 'accounts_menu':
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data='add_account')],
                [InlineKeyboardButton("üì• –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞", callback_data='bulk_add_accounts')],
                [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data='list_accounts')],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π", callback_data='refresh_session_stats')],
                [InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", callback_data='upload_accounts')],
                [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è", callback_data='profile_setup')],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            query.edit_message_text(
                "üë§ *–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏*\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )

        # –ú–ï–ù–Æ –ó–ê–î–ê–ß
        elif query.data == 'menu_tasks' or query.data == 'tasks_menu':
            keyboard = [
                [InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data='publish_now')],
                [InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data='schedule_publish')],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='publication_stats')],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            query.edit_message_text(
                "üìù *–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏*\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )

        # –ú–ï–ù–Æ –ü–†–û–ö–°–ò
        elif query.data == 'menu_proxy' or query.data == 'proxy_menu':
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏", callback_data='add_proxy')],
                [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏", callback_data='list_proxies')],
                [InlineKeyboardButton("üîÑ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å", callback_data='distribute_proxies')],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            query.edit_message_text(
                "üîÑ *–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏*\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )

        # –ú–ï–ù–Æ –ü–†–û–ì–†–ï–í–ê
        elif query.data == 'menu_warming' or query.data == 'warming_menu':
            keyboard = [
                [InlineKeyboardButton("üî• –ù–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–µ–≤", callback_data='start_warming')],
                [InlineKeyboardButton("‚ùÑÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ–≤", callback_data='stop_warming')],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≥—Ä–µ–≤–∞", callback_data='warming_stats')],
                [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='warming_settings_menu')],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            query.edit_message_text(
                "üî• *–ú–µ–Ω—é –ø—Ä–æ–≥—Ä–µ–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤*\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )

        # –ú–ï–ù–Æ –ü–û–ú–û–©–ò
        elif query.data == 'menu_help':
            help_text = """
*üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

*üë§ –ê–∫–∫–∞—É–Ω—Ç—ã:*
‚Ä¢ /accounts - –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
‚Ä¢ /add_account - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
‚Ä¢ /list_accounts - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤

*üìù –ó–∞–¥–∞—á–∏:*
‚Ä¢ /tasks - –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
‚Ä¢ /publish_now - –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å–µ–π—á–∞—Å

*üîÑ –ü—Ä–æ–∫—Å–∏:*
‚Ä¢ /proxy - –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏
‚Ä¢ /add_proxy - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏

*üî• –ü—Ä–æ–≥—Ä–µ–≤:*
‚Ä¢ /warming - –ú–µ–Ω—é –ø—Ä–æ–≥—Ä–µ–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
‚Ä¢ /warm_account - –ü—Ä–æ–≥—Ä–µ—Ç—å –∞–∫–∫–∞—É–Ω—Ç

*üõ† –û–±—â–∏–µ:*
‚Ä¢ /cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
            """

            keyboard = [
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            query.edit_message_text(
                help_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )

        # –î–ï–ô–°–¢–í–ò–Ø –° –ê–ö–ö–ê–£–ù–¢–ê–ú–ò
        elif query.data == 'add_account':
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞
            return add_account(update, context)

        elif query.data == 'bulk_add_accounts':
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='menu_accounts')]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            query.edit_message_text(
                "üì• *–ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤*\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`username:password:email:email_password`\n\n"
                "–ö–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ.",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            context.user_data['waiting_for_bulk_accounts'] = True
            return BULK_ADD_ACCOUNTS

        elif query.data == 'list_accounts':
            return list_accounts_handler(update, context)

        elif query.data == 'refresh_session_stats':
            return get_session_stats_handler(update, context)

        elif query.data == 'upload_accounts':
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='menu_accounts')]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            query.edit_message_text(
                "üì§ *–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞*\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ TXT —Ñ–∞–π–ª —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`username:password`\n"
                "–∏–ª–∏\n"
                "`username:password:email:email_password`\n\n"
                "–ö–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ.",
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
            context.user_data['waiting_for_accounts_file'] = True
            return WAITING_ACCOUNTS_FILE

        elif query.data == 'profile_setup':
            return profile_setup_menu(update, context)

        # –î–ï–ô–°–¢–í–ò–Ø –° –ü–†–û–ì–†–ï–í–û–ú
        elif query.data == 'start_warming':
            return select_account_for_warming(update, context)

        elif query.data == 'warming_stats':
            return show_warming_status(update, context)

        elif query.data == 'warming_settings_menu':
            return show_warming_settings(update, context)

        elif query.data.startswith('warming_account_'):
            return select_account_for_warming(update, context)

        elif query.data.startswith('warming_default_'):
            return start_account_warming(update, context)

        # –î–ï–ô–°–¢–í–ò–Ø –° –ó–ê–î–ê–ß–ê–ú–ò
        elif query.data == 'publish_now':
            keyboard = [
                [InlineKeyboardButton("üìπ Reels", callback_data='publish_type_reel')],
                [InlineKeyboardButton("üñºÔ∏è –§–æ—Ç–æ", callback_data='publish_type_post')],
                [InlineKeyboardButton("üß© –ú–æ–∑–∞–∏–∫–∞", callback_data='publish_type_mosaic')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='menu_tasks')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            query.edit_message_text(
                "üì§ *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:*",
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )

        elif query.data == 'schedule_publish':
            query.edit_message_text(
                "‚è∞ *–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è*\n\n"
                "–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='menu_tasks')]
                ]),
                parse_mode=ParseMode.MARKDOWN
            )

        elif query.data == 'publication_stats':
            query.edit_message_text(
                "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π*\n\n"
                "–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='menu_tasks')]
                ]),
                parse_mode=ParseMode.MARKDOWN
            )

        # –î–ï–ô–°–¢–í–ò–Ø –° –ü–†–û–ö–°–ò
        elif query.data == 'add_proxy':
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='menu_proxy')]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            query.edit_message_text(
                "‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏*\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`–ø—Ä–æ—Ç–æ–∫–æ–ª://–ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å@—Ö–æ—Å—Ç:–ø–æ—Ä—Ç`\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "`http://user:pass@1.2.3.4:8080`\n"
                "–∏–ª–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n"
                "`http://1.2.3.4:8080`",
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )

        elif query.data == 'list_proxies':
            query.edit_message_text(
                "üìã *–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏*\n\n"
                "–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='menu_proxy')]
                ]),
                parse_mode=ParseMode.MARKDOWN
            )

        elif query.data == 'distribute_proxies':
            query.edit_message_text(
                "üîÑ *–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏*\n\n"
                "–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='menu_proxy')]
                ]),
                parse_mode=ParseMode.MARKDOWN
            )

        # –ù–ï–ò–ó–í–ï–°–¢–ù–´–ï CALLBACK DATA
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {query.data}")
            query.edit_message_text(
                "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=get_main_menu_keyboard()
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback_handler: {e}")
        try:
            query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=get_main_menu_keyboard()
            )
        except Exception as inner_e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {inner_e}")

def text_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    keyboard = [
        [InlineKeyboardButton("üë§ –ê–∫–∫–∞—É–Ω—Ç—ã", callback_data='menu_accounts')],
        [InlineKeyboardButton("üìù –ó–∞–¥–∞—á–∏", callback_data='menu_tasks')],
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–∫—Å–∏", callback_data='menu_proxy')],
        [InlineKeyboardButton("üî• –ü—Ä–æ–≥—Ä–µ–≤", callback_data='menu_warming')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='menu_help')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text(
        "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:",
        reply_markup=reply_markup
    )

def help_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
*üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

*üë§ –ê–∫–∫–∞—É–Ω—Ç—ã:*
‚Ä¢ /accounts - –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
‚Ä¢ /add_account - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
‚Ä¢ /list_accounts - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤

*üìù –ó–∞–¥–∞—á–∏:*
‚Ä¢ /tasks - –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
‚Ä¢ /publish_now - –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å–µ–π—á–∞—Å

*üîÑ –ü—Ä–æ–∫—Å–∏:*
‚Ä¢ /proxy - –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏
‚Ä¢ /add_proxy - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏

*üî• –ü—Ä–æ–≥—Ä–µ–≤:*
‚Ä¢ /warming - –ú–µ–Ω—é –ø—Ä–æ–≥—Ä–µ–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
‚Ä¢ /warm_account - –ü—Ä–æ–≥—Ä–µ—Ç—å –∞–∫–∫–∞—É–Ω—Ç

*üõ† –û–±—â–∏–µ:*
‚Ä¢ /cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
    """

    keyboard = [
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text(
        help_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )

def cancel_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
    keyboard = [
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=reply_markup
    )
    return ConversationHandler.END

def error_handler(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏"""
    if "Query is too old" in str(context.error):
        logger.warning(f"–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –∑–∞–ø—Ä–æ—Å: {update}")
        return

    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update}: {context.error}")

    if update and update.effective_chat:
        try:
            context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_main_menu_keyboard()
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")

def setup_bot(updater):
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞"""
    dp = updater.dispatcher

    # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.add_handler(CommandHandler("start", start_handler))
    dp.add_handler(CommandHandler("help", help_handler))
    dp.add_handler(CommandHandler("cancel", cancel_handler))

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    dp.add_handler(CommandHandler("accounts", lambda u, c: callback_handler_command(u, c, 'menu_accounts')))
    dp.add_handler(CommandHandler("tasks", lambda u, c: callback_handler_command(u, c, 'menu_tasks')))
    dp.add_handler(CommandHandler("proxy", lambda u, c: callback_handler_command(u, c, 'menu_proxy')))
    dp.add_handler(CommandHandler("warming", lambda u, c: callback_handler_command(u, c, 'menu_warming')))

    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
    add_account_conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("add_account", add_account),
            CallbackQueryHandler(add_account, pattern='^add_account$')
        ],
        states={
            ENTER_USERNAME: [MessageHandler(Filters.text & ~Filters.command, enter_username)],
            ENTER_PASSWORD: [MessageHandler(Filters.text & ~Filters.command, enter_password)],
            ENTER_EMAIL: [MessageHandler(Filters.text & ~Filters.command, enter_email)],
            ENTER_EMAIL_PASSWORD: [MessageHandler(Filters.text & ~Filters.command, enter_email_password)],
            CONFIRM_ACCOUNT: [CallbackQueryHandler(confirm_add_account, pattern='^confirm_add_account$')],
            ENTER_VERIFICATION_CODE: [MessageHandler(Filters.text & ~Filters.command, enter_verification_code)]
        },
        fallbacks=[
            CallbackQueryHandler(cancel_add_account, pattern='^cancel_add_account$'),
            CallbackQueryHandler(lambda u, c: callback_handler_command(u, c, 'menu_accounts'), pattern='^menu_accounts$'),
            CommandHandler("cancel", cancel_handler)
        ]
    )

    dp.add_handler(add_account_conv_handler)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    for handler in get_all_handlers():
        dp.add_handler(handler)

    for handler in get_profile_handlers():
        dp.add_handler(handler)

    for handler in get_warming_handlers():
        dp.add_handler(handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
    dp.add_handler(MessageHandler(
        Filters.document.file_extension("txt"),
        lambda update, context: bulk_upload_accounts_file(update, context) if context.user_data.get('waiting_for_accounts_file', False) else None
    ))

    # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    dp.add_handler(CallbackQueryHandler(callback_handler))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞ –∑–∞–¥–∞—á
    dp.add_handler(CallbackQueryHandler(retry_task_callback, pattern=r'^retry_task_\d+$'))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    dp.add_handler(MessageHandler(
        Filters.text & ~Filters.command,
        lambda update, context: bulk_add_accounts_text(update, context) if context.user_data.get('waiting_for_bulk_accounts', False) else text_handler(update, context)
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    dp.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π")

def callback_handler_command(update, context, callback_data):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∫–∞–∫ callback"""
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π callback_query
    class FakeQuery:
        def __init__(self, data):
            self.data = data
        def answer(self):
            pass
        def edit_message_text(self, *args, **kwargs):
            update.message.reply_text(*args, **kwargs)

    # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω—è–µ–º callback_query
    original_query = getattr(update, 'callback_query', None)
    update.callback_query = FakeQuery(callback_data)
    
    try:
        callback_handler(update, context)
    finally:
        update.callback_query = original_query
